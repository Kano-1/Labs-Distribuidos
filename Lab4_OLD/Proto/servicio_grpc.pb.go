// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc1
// source: servicio.proto

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServicioMercenarios_EnviarDecisiones_FullMethodName  = "/Proto.servicioMercenarios/enviarDecisiones"
	ServicioMercenarios_VerMontoAcumulado_FullMethodName = "/Proto.servicioMercenarios/verMontoAcumulado"
	ServicioMercenarios_ComenzarPiso_FullMethodName      = "/Proto.servicioMercenarios/comenzarPiso"
)

// ServicioMercenariosClient is the client API for ServicioMercenarios service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicioMercenariosClient interface {
	EnviarDecisiones(ctx context.Context, in *ComunicarDecision, opts ...grpc.CallOption) (*RespuestaExito, error)
	VerMontoAcumulado(ctx context.Context, in *SolicitarMonto, opts ...grpc.CallOption) (*EntregarMonto, error)
	ComenzarPiso(ctx context.Context, in *EnviarEstado, opts ...grpc.CallOption) (*ConfirmarInicio, error)
}

type servicioMercenariosClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioMercenariosClient(cc grpc.ClientConnInterface) ServicioMercenariosClient {
	return &servicioMercenariosClient{cc}
}

func (c *servicioMercenariosClient) EnviarDecisiones(ctx context.Context, in *ComunicarDecision, opts ...grpc.CallOption) (*RespuestaExito, error) {
	out := new(RespuestaExito)
	err := c.cc.Invoke(ctx, ServicioMercenarios_EnviarDecisiones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicioMercenariosClient) VerMontoAcumulado(ctx context.Context, in *SolicitarMonto, opts ...grpc.CallOption) (*EntregarMonto, error) {
	out := new(EntregarMonto)
	err := c.cc.Invoke(ctx, ServicioMercenarios_VerMontoAcumulado_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicioMercenariosClient) ComenzarPiso(ctx context.Context, in *EnviarEstado, opts ...grpc.CallOption) (*ConfirmarInicio, error) {
	out := new(ConfirmarInicio)
	err := c.cc.Invoke(ctx, ServicioMercenarios_ComenzarPiso_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicioMercenariosServer is the server API for ServicioMercenarios service.
// All implementations must embed UnimplementedServicioMercenariosServer
// for forward compatibility
type ServicioMercenariosServer interface {
	EnviarDecisiones(context.Context, *ComunicarDecision) (*RespuestaExito, error)
	VerMontoAcumulado(context.Context, *SolicitarMonto) (*EntregarMonto, error)
	ComenzarPiso(context.Context, *EnviarEstado) (*ConfirmarInicio, error)
	mustEmbedUnimplementedServicioMercenariosServer()
}

// UnimplementedServicioMercenariosServer must be embedded to have forward compatible implementations.
type UnimplementedServicioMercenariosServer struct {
}

func (UnimplementedServicioMercenariosServer) EnviarDecisiones(context.Context, *ComunicarDecision) (*RespuestaExito, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarDecisiones not implemented")
}
func (UnimplementedServicioMercenariosServer) VerMontoAcumulado(context.Context, *SolicitarMonto) (*EntregarMonto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerMontoAcumulado not implemented")
}
func (UnimplementedServicioMercenariosServer) ComenzarPiso(context.Context, *EnviarEstado) (*ConfirmarInicio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComenzarPiso not implemented")
}
func (UnimplementedServicioMercenariosServer) mustEmbedUnimplementedServicioMercenariosServer() {}

// UnsafeServicioMercenariosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioMercenariosServer will
// result in compilation errors.
type UnsafeServicioMercenariosServer interface {
	mustEmbedUnimplementedServicioMercenariosServer()
}

func RegisterServicioMercenariosServer(s grpc.ServiceRegistrar, srv ServicioMercenariosServer) {
	s.RegisterService(&ServicioMercenarios_ServiceDesc, srv)
}

func _ServicioMercenarios_EnviarDecisiones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComunicarDecision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioMercenariosServer).EnviarDecisiones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicioMercenarios_EnviarDecisiones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioMercenariosServer).EnviarDecisiones(ctx, req.(*ComunicarDecision))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicioMercenarios_VerMontoAcumulado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitarMonto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioMercenariosServer).VerMontoAcumulado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicioMercenarios_VerMontoAcumulado_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioMercenariosServer).VerMontoAcumulado(ctx, req.(*SolicitarMonto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicioMercenarios_ComenzarPiso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnviarEstado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioMercenariosServer).ComenzarPiso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicioMercenarios_ComenzarPiso_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioMercenariosServer).ComenzarPiso(ctx, req.(*EnviarEstado))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicioMercenarios_ServiceDesc is the grpc.ServiceDesc for ServicioMercenarios service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicioMercenarios_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Proto.servicioMercenarios",
	HandlerType: (*ServicioMercenariosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "enviarDecisiones",
			Handler:    _ServicioMercenarios_EnviarDecisiones_Handler,
		},
		{
			MethodName: "verMontoAcumulado",
			Handler:    _ServicioMercenarios_VerMontoAcumulado_Handler,
		},
		{
			MethodName: "comenzarPiso",
			Handler:    _ServicioMercenarios_ComenzarPiso_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servicio.proto",
}
