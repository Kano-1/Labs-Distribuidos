// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc1
// source: Proto/communication.proto

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Broker_GetServerAddress_FullMethodName = "/Proto.Broker/GetServerAddress"
)

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	GetServerAddress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerAddress, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) GetServerAddress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerAddress, error) {
	out := new(ServerAddress)
	err := c.cc.Invoke(ctx, Broker_GetServerAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	GetServerAddress(context.Context, *Empty) (*ServerAddress, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (UnimplementedBrokerServer) GetServerAddress(context.Context, *Empty) (*ServerAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerAddress not implemented")
}
func (UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

// UnsafeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServer will
// result in compilation errors.
type UnsafeBrokerServer interface {
	mustEmbedUnimplementedBrokerServer()
}

func RegisterBrokerServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	s.RegisterService(&Broker_ServiceDesc, srv)
}

func _Broker_GetServerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetServerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broker_GetServerAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetServerAddress(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Broker_ServiceDesc is the grpc.ServiceDesc for Broker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Proto.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerAddress",
			Handler:    _Broker_GetServerAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/communication.proto",
}

const (
	Servers_WriteInfo_FullMethodName = "/Proto.Servers/WriteInfo"
	Servers_ReadInfo_FullMethodName  = "/Proto.Servers/ReadInfo"
)

// ServersClient is the client API for Servers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServersClient interface {
	WriteInfo(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ClockResponse, error)
	ReadInfo(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*EnemiesResponse, error)
}

type serversClient struct {
	cc grpc.ClientConnInterface
}

func NewServersClient(cc grpc.ClientConnInterface) ServersClient {
	return &serversClient{cc}
}

func (c *serversClient) WriteInfo(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ClockResponse, error) {
	out := new(ClockResponse)
	err := c.cc.Invoke(ctx, Servers_WriteInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversClient) ReadInfo(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*EnemiesResponse, error) {
	out := new(EnemiesResponse)
	err := c.cc.Invoke(ctx, Servers_ReadInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServersServer is the server API for Servers service.
// All implementations must embed UnimplementedServersServer
// for forward compatibility
type ServersServer interface {
	WriteInfo(context.Context, *ActionRequest) (*ClockResponse, error)
	ReadInfo(context.Context, *ReadRequest) (*EnemiesResponse, error)
	mustEmbedUnimplementedServersServer()
}

// UnimplementedServersServer must be embedded to have forward compatible implementations.
type UnimplementedServersServer struct {
}

func (UnimplementedServersServer) WriteInfo(context.Context, *ActionRequest) (*ClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteInfo not implemented")
}
func (UnimplementedServersServer) ReadInfo(context.Context, *ReadRequest) (*EnemiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadInfo not implemented")
}
func (UnimplementedServersServer) mustEmbedUnimplementedServersServer() {}

// UnsafeServersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServersServer will
// result in compilation errors.
type UnsafeServersServer interface {
	mustEmbedUnimplementedServersServer()
}

func RegisterServersServer(s grpc.ServiceRegistrar, srv ServersServer) {
	s.RegisterService(&Servers_ServiceDesc, srv)
}

func _Servers_WriteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).WriteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Servers_WriteInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).WriteInfo(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servers_ReadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServer).ReadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Servers_ReadInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServer).ReadInfo(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Servers_ServiceDesc is the grpc.ServiceDesc for Servers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Servers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Proto.Servers",
	HandlerType: (*ServersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteInfo",
			Handler:    _Servers_WriteInfo_Handler,
		},
		{
			MethodName: "ReadInfo",
			Handler:    _Servers_ReadInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/communication.proto",
}
